let mpg_data;_07e‍.x([["searchHighPower",()=>searchHighPower],["searchMpg",()=>searchMpg],["searchName",()=>searchName],["searchByYear",()=>searchByYear]]);_07e‍.w("./data/mpg_data",[["default",["mpg_data"],function(v){mpg_data=v}]]);

/*
mpg_data is imported for you but that is for testing purposes only. All of the functions should use
a car_data param that is supplied as the first parameter.

As you write these functions notice how they could possibly be chained together to solve more complicated
queries.
 */

/**
 * @param {array} car_data - an instance of mpg_data that should be used for filtering.
 * @param minHorsepower {number}
 * @param minTorque {number}
 *
 * @return {array} An array of car objects with horsepower >= minHorsePower and torque >= minTorque
 * sorted by horsepower in descending order.
 *
 */
       function searchHighPower(car_data, minHorsepower, minTorque) {

    var cars = car_data.filter(obj => obj.horsepower >= minHorsepower && obj.torque >= minTorque);

    var sorted = cars.sort((a, b) => (a.horsepower > b.horsepower) ? -1 : 1);
    return sorted;
}



/**
 * @param {array} car_data
 * @param minCity
 * @param minHighway
 *
 *
 * @return {array} An array of car objects with highway_mpg >= minHighway and city_mpg >= minCity
 * sorted by highway_mpg in descending order
 *
 */
       function searchMpg(car_data, minCity, minHighway) {
    var cars = car_data.filter(obj => obj.highway_mpg >= minHighway && obj.city_mpg >= minCity);
    var sorted = cars.sort((a, b) => (a.highway_mpg > b.highway_mpg) ? -1 : 1);

    return sorted;
}

/**
 * Find all cars where 'id' contains the search term below.
 * Sort the results so that if the term appears earlier in the string
 * it will appear earlier in the list. Make sure searching and sorting ignores case.
 * @param car_data
 * @param searchTerm A string to that is used for searching
 * @returns {[]} array of cars
 */
       function searchName(car_data, searchTerm) {
    searchTerm = searchTerm.toLowerCase();

    car_data.forEach(obj => {obj['id'] = obj['id'].toLowerCase()});

    var filtered = [];

    for (var i = 0; i < car_data.length; i++) {
        var s = String(car_data[i]['id']);
        if(s.includes(searchTerm)) {
            filtered.push(car_data[i]);
        }
    }

    var sorted = filtered.sort((a, b) => {(a.id.search(searchTerm) > b.id.search(searchTerm)) ? -1 : 1});

    return sorted;
}

// console.log(searchName(mpg_data, "hondA"));

/**
 * Find all cars made in the years asked for.
 * Sort the results by year in descending order. 
 *
 * @param car_data
 * @param {number[]} years - array of years to be included in the results e.g. [2010, 2012]
 * @returns {[]} an array of car objects
 */
       function searchByYear(car_data, years) {
    var yearFilter = car_data.filter(obj => years.includes(obj.year));
    var sorted = yearFilter.sort((a, b) => (a.year > b.year) ? -1 : 1);
    return sorted;
}

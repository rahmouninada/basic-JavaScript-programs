let mpg_data,getStatistics,getSum;_654‍.x([["allCarStats",()=>allCarStats],["moreStats",()=>moreStats]]);_654‍.w("./data/mpg_data",[["default",["mpg_data"],function(v){mpg_data=v}]]);_654‍.w("./medium_1",[["getStatistics",["getStatistics"],function(v){getStatistics=v}],["getSum",["getSum"],function(v){getSum=v}]]);




/**
 * This object contains data that has to do with every car in the `mpg_data` object.
 *
 *
 * @param {allCarStats.avgMpg} Average miles per gallon on the highway and in the city. keys `city` and `highway`
 *
 * @param {allCarStats.allYearStats} The result of calling `getStatistics` from medium_1.js on
 * the years the cars were made.
 *
 * @param {allCarStats.ratioHybrids} ratio of cars that are hybrids
 */
       const allCarStats = {
    avgMpg: avgMpg(mpg_data),
    allYearStats: allYearStats(mpg_data),
    ratioHybrids: ratioHybrids(mpg_data),
};

function allYearStats(array) {
    var y = [];

    for (var i = 0; i < array.length; i++) {
        y[i] = array[i]["year"];
    }

    return getStatistics(y);
}

 function ratioHybrids(array) {
    var h = 0;
    var not = 0;

    for(var i = 0; i < array.length; i++) {
        if (array[i]["hybrid"]) {
            h = h + 1;
        } else {
            not = not + 1;
        }
    }
    return h/(h+not);
}


function avgMpg(array) {
    var city = [];
    var highway = [];
    
    for(var i = 0; i < array.length; i++) {
        city[i] = array[i]["city_mpg"];
    }

    for(var i = 0; i < array.length; i++) {
        highway[i] = array[i]["highway_mpg"];
    }

    var avgCity = (getSum(city) / city.length);
    var avgHighway = (getSum(highway) / highway.length);

    return {'city': avgCity, 'highway': avgHighway};
}


// console.log(avgMpg(mpg_data));
// console.log(allYearStats(mpg_data));
_654‍.g.console.log(ratioHybrids(mpg_data));

/**
 * HINT: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce
 *
 * @param {moreStats.makerHybrids} Array of objects where keys are the `make` of the car and
 * a list of `hybrids` available (their `id` string). Don't show car makes with 0 hybrids. Sort by the number of hybrids
 * in descending order.
 *
 *[{
 *     "make": "Buick",
 *     "hybrids": [
 *       "2012 Buick Lacrosse Convenience Group",
 *       "2012 Buick Lacrosse Leather Group",
 *       "2012 Buick Lacrosse Premium I Group",
 *       "2012 Buick Lacrosse"
 *     ]
 *   },
 *{
 *     "make": "BMW",
 *     "hybrids": [
 *       "2011 BMW ActiveHybrid 750i Sedan",
 *       "2011 BMW ActiveHybrid 750Li Sedan"
 *     ]
 *}]
 *
 *
 *
 *
 * @param {moreStats.avgMpgByYearAndHybrid} Object where keys are years and each year
 * an object with keys for `hybrid` and `notHybrid`. The hybrid and notHybrid
 * should be an object with keys for `highway` and `city` average mpg.
 *
 * Only years in the data should be keys.
 *
 * {
 *     2020: {
 *         hybrid: {
 *             city: average city mpg,
 *             highway: average highway mpg
 *         },
 *         notHybrid: {
 *             city: average city mpg,
 *             highway: average highway mpg
 *         }
 *     },
 *     2021: {
 *         hybrid: {
 *             city: average city mpg,
 *             highway: average highway mpg
 *         },
 *         notHybrid: {
 *             city: average city mpg,
 *             highway: average highway mpg
 *         }
 *     },
 *
 * }
 */
       const moreStats = {
    makerHybrids: makerHybrids(mpg_data),
    avgMpgByYearAndHybrid: avgMpgByYearAndHybrid(mpg_data),
};

function makerHybrids(arr) {
    var toReturn = [];
    var makes = {};

    arr.forEach(elt => {
        if(!(elt.make in makes)) {
            makes[elt.make] = toReturn.length;
            toReturn[toReturn.length] = {};
            toReturn[makes[elt.make]].make = elt.make;
            toReturn[makes[elt.make]].hybrids = [];
            if (elt.hybrid){
                toReturn[makes[elt.make]].hybrids.push(elt['id']);
            }
        } else {
            if (elt.hybrid) {
                toReturn[makes[elt.make]].hybrids.push(elt['id']);
            }
        }
    });

    var newReturn = toReturn.filter(elt => { return elt.hybrids.length > 0 });
    return newReturn.sort((a, b) => {b.hybrids.length - a.hybrids.length});
}

function avgMpgByYearAndHybrid(obj) {
    var toReturn = {};
    var yrs = new Set();

    obj.forEach(elt => { yrs.add(elt.year)});

    var current = new Set();
    var yrsArray = [...yrs]; 
    var justHybrids;
    var notHybrids;

    yrsArray.forEach(elt => {
        toReturn[elt] = {};

        current = obj.filter(obj => { return obj.year === elt;});

        justHybrids = current.filter(obj => { return obj.hybrid});

        notHybrids = current.filter(obj => {return !obj.hybrid});

        toReturn[elt].hybrid = avgMpg(justHybrids);
        toReturn[elt].notHybrid = avgMpg(notHybrids);
    });

    return toReturn;
}